var _user$project$Update$isColiding = F2(
	function (bird, pipe) {
		var downPipe = pipe.y - (pipe.height / 2);
		var upPipe = pipe.y + (pipe.height / 2);
		var rightPipe = pipe.x + (pipe.width / 2);
		var leftPipe = pipe.x - (pipe.width / 2);
		var birdHeight = 35;
		var upBird = bird.y + (birdHeight / 2);
		var downBird = (bird.y - (birdHeight / 2)) + 17;
		var birdWidth = 35;
		var rightBird = (bird.x + (birdWidth / 2)) - 10;
		var leftBird = (bird.x - (birdWidth / 2)) + 10;
		return !((_elm_lang$core$Native_Utils.cmp(leftPipe, rightBird) > 0) || ((_elm_lang$core$Native_Utils.cmp(rightPipe, leftBird) < 0) || ((_elm_lang$core$Native_Utils.cmp(upPipe, downBird) < 0) || (_elm_lang$core$Native_Utils.cmp(downPipe, upBird) > 0))));
	});
var _user$project$Update$checkPipeColision = function (game) {
	var bird = game.bird;
	var pipesToCheck = A2(
		_elm_lang$core$List$filter,
		function (pipe) {
			return _elm_lang$core$Native_Utils.cmp(pipe.x, bird.x) > -1;
		},
		game.pipes);
	var pipesColiding = A2(
		_elm_lang$core$List$any,
		function (pipe) {
			return A2(_user$project$Update$isColiding, bird, pipe);
		},
		pipesToCheck);
	return pipesColiding ? _elm_lang$core$Native_Utils.update(
		game,
		{state: _user$project$Model$GameOver}) : game;
};
var _user$project$Update$upperLimit = function (game) {
	var bird = game.bird;
	return (_elm_lang$core$Native_Utils.cmp(bird.y, 0 - (_user$project$Model$gameHeight / 2)) < 1) ? _elm_lang$core$Native_Utils.update(
		game,
		{state: _user$project$Model$GameOver}) : game;
};
var _user$project$Update$updatePipe = F2(
	function (bird, pipe) {
		var birdWidth = 35;
		var leftBird = (bird.x - (birdWidth / 2)) + 10;
		var passed = (_elm_lang$core$Native_Utils.cmp(leftBird, pipe.x + pipe.width) > -1) ? true : false;
		return _elm_lang$core$Native_Utils.update(
			pipe,
			{x: pipe.x - bird.vx, passed: passed});
	});
var _user$project$Update$updatePipes = function (game) {
	var bird = game.bird;
	return _elm_lang$core$Native_Utils.update(
		game,
		{
			pipes: A2(
				_elm_lang$core$List$map,
				function (pipe) {
					return A2(_user$project$Update$updatePipe, bird, pipe);
				},
				game.pipes)
		});
};
var _user$project$Update$jump = function (bird) {
	return _elm_lang$core$Native_Utils.update(
		bird,
		{vy: 6});
};
var _user$project$Update$gravityValue = 0.45;
var _user$project$Update$physics = function (game) {
	var bird = game.bird;
	var newBird = (_elm_lang$core$Native_Utils.cmp(bird.y, _user$project$Model$gameHeight / 2) < 1) ? _elm_lang$core$Native_Utils.update(
		bird,
		{y: bird.y + bird.vy}) : _elm_lang$core$Native_Utils.update(
		bird,
		{y: _user$project$Model$gameHeight / 2});
	return _elm_lang$core$Native_Utils.update(
		game,
		{bird: newBird});
};
var _user$project$Update$gravity = function (game) {
	var bird = game.bird;
	var newBird = _elm_lang$core$Native_Utils.update(
		bird,
		{
			vy: (_elm_lang$core$Native_Utils.cmp(bird.y, 0 - (_user$project$Model$gameHeight / 2)) > 0) ? (bird.vy - _user$project$Update$gravityValue) : 0
		});
	return _elm_lang$core$Native_Utils.update(
		game,
		{bird: newBird});
};
var _user$project$Update$generateNewPipe = F2(
	function (game, height) {
		var bottomHeight = height;
		var upHeight = (400 - bottomHeight) + 200;
		var upPipe = {height: upHeight, width: 75, x: 300, y: _user$project$Model$gameHeight / 2, direction: _user$project$Model$Up, passed: false};
		var downPipe = {height: bottomHeight, width: 75, x: 300, y: (0 - _user$project$Model$gameHeight) / 2, direction: _user$project$Model$Down, passed: false};
		return _elm_lang$core$Native_Utils.update(
			game,
			{
				pipes: A2(
					_elm_lang$core$List$append,
					game.pipes,
					{
						ctor: '::',
						_0: upPipe,
						_1: {
							ctor: '::',
							_0: downPipe,
							_1: {ctor: '[]'}
						}
					})
			});
	});
var _user$project$Update$scorePayload = function (game) {
	var uid = function () {
		var _p0 = game.uid;
		if (_p0.ctor === 'Nothing') {
			return '';
		} else {
			return _p0._0;
		}
	}();
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'uid',
				_1: _elm_lang$core$Json_Encode$string(uid)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'score',
					_1: _elm_lang$core$Json_Encode$int(game.score)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Update$decodeJoiningGame = function (raw) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'uid', _elm_lang$core$Json_Decode$string)),
		raw);
};
var _user$project$Update$topPlayerDecoder = function (raw) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A4(
			_elm_lang$core$Json_Decode$map3,
			F3(
				function (v0, v1, v2) {
					return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
				}),
			A2(_elm_lang$core$Json_Decode$field, 'uid', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'score', _elm_lang$core$Json_Decode$int)),
		raw);
};
var _user$project$Update$decodeTopPlayers = function (raw) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A7(
			_elm_lang$core$Json_Decode$map6,
			F6(
				function (v0, v1, v2, v3, v4, v5) {
					return {ctor: '_Tuple6', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4, _5: v5};
				}),
			A2(_elm_lang$core$Json_Decode$field, 'name_0', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'score_0', _elm_lang$core$Json_Decode$int),
			A2(_elm_lang$core$Json_Decode$field, 'name_1', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'score_1', _elm_lang$core$Json_Decode$int),
			A2(_elm_lang$core$Json_Decode$field, 'name_2', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'score_2', _elm_lang$core$Json_Decode$int)),
		raw);
};
var _user$project$Update$updatedTopPlayers = F6(
	function (name_0, score_0, name_1, score_1, name_2, score_2) {
		var third = {name: name_2, score: score_2};
		var second = {name: name_1, score: score_1};
		var first = {name: name_0, score: score_0};
		return {
			ctor: '::',
			_0: first,
			_1: {
				ctor: '::',
				_0: second,
				_1: {
					ctor: '::',
					_0: third,
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _user$project$Update$update = F2(
	function (msg, game) {
		update:
		while (true) {
			var _p1 = game.state;
			switch (_p1.ctor) {
				case 'Play':
					var _p2 = msg;
					switch (_p2.ctor) {
						case 'AskForTopPlayers':
							var phxPush = A2(
								_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
								_user$project$Update$scorePayload(game),
								A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'top_players', 'game:lobby'));
							var _p3 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, phxPush, game.phxSocket);
							var phxSocket = _p3._0;
							var phxCmd = _p3._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									game,
									{phxSocket: phxSocket}),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Msg$PhoenixMsg, phxCmd)
							};
						case 'SendScore':
							var phxPush = A2(
								_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
								_user$project$Update$scorePayload(game),
								A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'update_score', 'game:lobby'));
							var _p4 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, phxPush, game.phxSocket);
							var phxSocket = _p4._0;
							var phxCmd = _p4._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									game,
									{phxSocket: phxSocket}),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Msg$PhoenixMsg, phxCmd)
							};
						case 'TimeUpdate':
							return _user$project$Update$updateFlappy(game);
						case 'KeyDown':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									game,
									{
										bird: _user$project$Update$jump(game.bird)
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						case 'GeneratePipe':
							return {
								ctor: '_Tuple2',
								_0: game,
								_1: A2(
									_elm_lang$core$Random$generate,
									_user$project$Msg$NewPipe,
									A2(_elm_lang$core$Random$float, 50, 400))
							};
						case 'NewPipe':
							return {
								ctor: '_Tuple2',
								_0: A2(_user$project$Update$generateNewPipe, game, _p2._0),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						case 'JoinGame':
							var phxPush = A2(
								_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
								_elm_lang$core$Json_Encode$object(
									{ctor: '[]'}),
								A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'join_game', 'game:lobby'));
							var _p5 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, phxPush, game.phxSocket);
							var phxSocket = _p5._0;
							var phxCmd = _p5._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									game,
									{phxSocket: phxSocket}),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Msg$PhoenixMsg, phxCmd)
							};
						case 'PhoenixMsg':
							var _p6 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p2._0, game.phxSocket);
							var phxSocket = _p6._0;
							var phxCmd = _p6._1;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									game,
									{phxSocket: phxSocket}),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Msg$PhoenixMsg, phxCmd)
							};
						case 'JoinedGame':
							var _p7 = _user$project$Update$decodeJoiningGame(_p2._0);
							if (_p7.ctor === 'Ok') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										game,
										{
											name: _elm_lang$core$Maybe$Just(_p7._0._0),
											uid: _elm_lang$core$Maybe$Just(_p7._0._1)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
							}
						default:
							var _p10 = _p2._0;
							var _p8 = A2(_elm_lang$core$Debug$log, 'RAW HERE', _p10);
							var _p9 = _user$project$Update$decodeTopPlayers(_p10);
							if (_p9.ctor === 'Ok') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										game,
										{
											topPlayers: A6(_user$project$Update$updatedTopPlayers, _p9._0._0, _p9._0._1, _p9._0._2, _p9._0._3, _p9._0._4, _p9._0._5)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
							}
					}
				case 'Start':
					var _p11 = msg;
					if (_p11.ctor === 'KeyDown') {
						var _v6 = _user$project$Msg$JoinGame,
							_v7 = _elm_lang$core$Native_Utils.update(
							game,
							{state: _user$project$Model$Play});
						msg = _v6;
						game = _v7;
						continue update;
					} else {
						return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _user$project$Update$updateFlappy = function (game) {
	return _user$project$Update$updateScore(
		_user$project$Update$updatePipes(
			_user$project$Update$checkPipeColision(
				_user$project$Update$upperLimit(
					_user$project$Update$physics(
						_user$project$Update$gravity(game))))));
};
var _user$project$Update$updateScore = function (game) {
	var score = function (x) {
		return (x / 2) | 0;
	}(
		_elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				function (pipe) {
					return _elm_lang$core$Native_Utils.eq(pipe.passed, true);
				},
				game.pipes)));
	return _elm_lang$core$Native_Utils.eq(game.score, score) ? {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none} : A2(
		_user$project$Update$update,
		_user$project$Msg$SendScore,
		_elm_lang$core$Native_Utils.update(
			game,
			{score: score}));
};
