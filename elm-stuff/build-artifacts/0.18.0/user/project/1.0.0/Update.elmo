var _user$project$Update$isColiding = F2(
	function (bird, pipe) {
		var upPipe = pipe.y + (pipe.height / 2);
		var rightPipe = pipe.x + (pipe.width / 2);
		var leftPipe = pipe.x - (pipe.width / 2);
		var birdHeight = 35;
		var downBird = bird.y - (birdHeight / 2);
		var birdWidth = 35;
		var rightBird = bird.x + (birdWidth / 2);
		var leftBird = bird.x - (birdWidth / 2);
		var _p0 = pipe.direction;
		if (_p0.ctor === 'Down') {
			return (_elm_lang$core$Native_Utils.cmp(rightBird, leftPipe) > 0) && ((_elm_lang$core$Native_Utils.cmp(leftBird, rightPipe) < 0) && (_elm_lang$core$Native_Utils.cmp(downBird, upPipe) < 0));
		} else {
			return false;
		}
	});
var _user$project$Update$checkPipeColision = function (game) {
	var bird = game.bird;
	var pipesToCheck = A2(
		_elm_lang$core$List$filter,
		function (pipe) {
			return _elm_lang$core$Native_Utils.cmp(pipe.x, bird.x) > -1;
		},
		game.pipes);
	var pipesColiding = A2(
		_elm_lang$core$List$any,
		function (pipe) {
			return A2(_user$project$Update$isColiding, bird, pipe);
		},
		pipesToCheck);
	return pipesColiding ? _elm_lang$core$Native_Utils.update(
		game,
		{state: _user$project$Model$GameOver}) : game;
};
var _user$project$Update$upperLimit = function (game) {
	var bird = game.bird;
	return (_elm_lang$core$Native_Utils.cmp(bird.y, 0 - (_user$project$Model$gameHeight / 2)) < 1) ? _elm_lang$core$Native_Utils.update(
		game,
		{state: _user$project$Model$GameOver}) : game;
};
var _user$project$Update$updatePipe = F2(
	function (bird, pipe) {
		return _elm_lang$core$Native_Utils.update(
			pipe,
			{x: pipe.x - bird.vx});
	});
var _user$project$Update$updatePipes = function (game) {
	var bird = game.bird;
	return _elm_lang$core$Native_Utils.update(
		game,
		{
			pipes: A2(
				_elm_lang$core$List$map,
				function (pipe) {
					return A2(_user$project$Update$updatePipe, bird, pipe);
				},
				game.pipes)
		});
};
var _user$project$Update$jump = function (bird) {
	return _elm_lang$core$Native_Utils.update(
		bird,
		{vy: 8});
};
var _user$project$Update$gravityValue = 0.45;
var _user$project$Update$physics = function (game) {
	var bird = game.bird;
	var newBird = (_elm_lang$core$Native_Utils.cmp(bird.y, _user$project$Model$gameHeight / 2) < 1) ? _elm_lang$core$Native_Utils.update(
		bird,
		{y: bird.y + bird.vy}) : _elm_lang$core$Native_Utils.update(
		bird,
		{y: _user$project$Model$gameHeight / 2});
	return _elm_lang$core$Native_Utils.update(
		game,
		{bird: newBird});
};
var _user$project$Update$gravity = function (game) {
	var bird = game.bird;
	var newBird = _elm_lang$core$Native_Utils.update(
		bird,
		{
			vy: (_elm_lang$core$Native_Utils.cmp(bird.y, 0 - (_user$project$Model$gameHeight / 2)) > 0) ? (bird.vy - _user$project$Update$gravityValue) : 0
		});
	return _elm_lang$core$Native_Utils.update(
		game,
		{bird: newBird});
};
var _user$project$Update$updateFlappy = function (game) {
	return _user$project$Update$checkPipeColision(
		_user$project$Update$upperLimit(
			_user$project$Update$updatePipes(
				_user$project$Update$physics(
					_user$project$Update$gravity(game)))));
};
var _user$project$Update$generateNewPipe = function (game) {
	var downPipe = {height: 90, width: 75, x: 300, y: (0 - _user$project$Model$gameHeight) / 2, direction: _user$project$Model$Down};
	var upPipe = {height: 90, width: 75, x: 300, y: _user$project$Model$gameHeight / 2, direction: _user$project$Model$Up};
	return _elm_lang$core$Native_Utils.update(
		game,
		{
			pipes: A2(
				_elm_lang$core$List$append,
				game.pipes,
				{
					ctor: '::',
					_0: upPipe,
					_1: {
						ctor: '::',
						_0: downPipe,
						_1: {ctor: '[]'}
					}
				})
		});
};
var _user$project$Update$update = F2(
	function (msg, game) {
		var _p1 = game.state;
		switch (_p1.ctor) {
			case 'Play':
				var _p2 = msg;
				switch (_p2.ctor) {
					case 'TimeUpdate':
						return {
							ctor: '_Tuple2',
							_0: _user$project$Update$updateFlappy(game),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'KeyDown':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								game,
								{
									bird: _user$project$Update$jump(game.bird)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {
							ctor: '_Tuple2',
							_0: _user$project$Update$generateNewPipe(game),
							_1: _elm_lang$core$Platform_Cmd$none
						};
				}
			case 'Start':
				var _p3 = msg;
				if (_p3.ctor === 'KeyDown') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							game,
							{state: _user$project$Model$Play}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {ctor: '_Tuple2', _0: game, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Update$GeneratePipe = function (a) {
	return {ctor: 'GeneratePipe', _0: a};
};
var _user$project$Update$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Update$TimeUpdate = function (a) {
	return {ctor: 'TimeUpdate', _0: a};
};
